#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdlib.h>
#include <sys/time.h>
#include <math.h>

int main(int argc, char **argv)
{

  if (argc != 2)
  {
    printf("Forma de uso: ./run1.sh \"Ejercicio2 m\" (m= dimension para las matrices)\n");
    return 1;
  }

  int world_rank, world_size;
  MPI_Init(&argc, &argv);
  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);
  MPI_Comm_size(MPI_COMM_WORLD, &world_size);

  struct timeval start, end;
  int tam, i, j, z;
  char *v = NULL;
  tam = strtol(argv[1], &v, 10);

  if (world_size != tam)
  {
    fprintf(stderr, "La dimension de las matrices y el numero de procesos deben de ser iguales\n");
    MPI_Abort(MPI_COMM_WORLD, 1);
  }

  int *A, *B, *C, *traspuesta_B, *subvector_A, *subvector_B, *subvector_C;
  double inicio, final, tiempo_transcurrido;

  A = (int *)malloc(tam * tam * sizeof(int));
  B = (int *)malloc(tam * tam * sizeof(int));
  traspuesta_B = (int *)malloc(tam * tam * sizeof(int));
  C = (int *)malloc(tam * tam * sizeof(int));

  subvector_A = (int *)malloc(tam * sizeof(int));
  subvector_B = (int *)malloc(tam * sizeof(int));
  subvector_C = (int *)malloc(tam * sizeof(int));

  if (world_rank == 0)
  {
    for (i = 0; i < tam; i++)
    {
      for (j = 0; j < tam; j++)
      {
        A[tam * i + j] = rand() % 50;
        B[tam * i + j] = rand() % 50;
        traspuesta_B[tam * j + i] = B[tam * i + j];
      }
    }
  }

  MPI_Scatter(A, tam, MPI_INT, subvector_A, tam, MPI_INT, 0, MPI_COMM_WORLD);
  MPI_Scatter(traspuesta_B, tam, MPI_INT, subvector_B, tam, MPI_INT, 0, MPI_COMM_WORLD);
  free(A);
  free(B);
  free(traspuesta_B);

  for (i = 0; i < tam; i++)
  {
    subvector_C[i] = 0;
  }

  inicio = MPI_Wtime();

  int enviado = (int)(world_rank + (tam - 1)) % tam;
  int recibido = (int)(world_rank + 1) % tam;
  for (z = 0; z < tam; z++)
  {
    for (i = 0; i < tam; i++)
    {
      subvector_C[(world_rank + z) % tam] += subvector_A[i] * subvector_B[i];
    }
    MPI_Send(subvector_B, tam, MPI_INT, enviado, 0, MPI_COMM_WORLD);
    MPI_Recv(subvector_B, tam, MPI_INT, recibido, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
  }

  MPI_Gather(subvector_C, tam, MPI_INT, C, tam, MPI_INT, 0, MPI_COMM_WORLD);
  final = MPI_Wtime();
  tiempo_transcurrido = final - inicio;
  if (world_rank == 0)
  {
    long seconds = (end.tv_sec - start.tv_sec);
    long micros = ((seconds * 1000000) + end.tv_usec) - (start.tv_usec);
    printf("Tiempo ejecuciÃ³n: %f seg \n", tiempo_transcurrido);
  }

  free(C);
  free(subvector_A);
  free(subvector_B);
  free(subvector_C);

  MPI_Finalize();
}
